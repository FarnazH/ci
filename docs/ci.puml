@startuml

namespace ci {
    abstract class CI {
        __ protected members __
            # size_t nelec
            # size_t K
            # size_t nbf
            # doci::State lowestEigenState
            # doci::CI_basis* basis
            # doci::Hamiltonian* hamiltonian
        __ protected methods __
            # virtual void **calculateCI**(size_t start, size_t end)=0
            # virtual void **construct**()=0
        == constructors ==
            **CI**()
            **CI**(CI_basis *ciBasis)
        __ public methods __
            + Hamiltonian* **getHamiltonian**() const
    }


    class DOCI {
        __ private members __
            - size_t npairs
            - bmqc::AddressingScheme ad_mat
        __ private methods __
            - void **calculateCI**(size_t start, size_t end) override
            - void **construct**() override
        == constructors ==
            **DOCI**(CI_basis *ciBasis)
    }


    class State {
        __ private members __
            - double eigenvalue
            - Eigen::VectorXd eigenvector
        == constructors ==
            **State**()
            **State**(double eval, const Eigen::VectorXd& evec)
        __ public methods __
            + double **get_eigenvalue**() const
            + Eigen::VectorXd **get_eigenvector**() const

            + bool **operator<**(const ci::State& rhs) const
            + bool **operator>**(const ci::State& rhs) const
            + bool **operator==**(const ci::State& rhs) const
    }


    abstract class Hamiltonian {
        __ protected members __
            # size_t nbf
            # Eigen::VectorXd eigenvalues
            # Eigen::MatrixXd eigenvectors
            # std::vector<doci::State> groundstates= { doci::State (std::numeric_limits<double>::max(), Eigen::VectorXd()) }
        __ protected methods __
            # void **groundStates**(doci::State state)
        __ public methods __
            + const std::vector<doci::State>& **getGroundstates**() const
            + virtual void **add**(double value, size_t index1, size_t index2)=0
            + virtual void **solve**()=0
            + {static} Hamiltonian* **make_hamiltonian**(size_t nbf);
    }


    class DenseHamiltonian {
        __ private members __
            - Eigen::MatrixXd hamiltonian
        == constructors ==
            **DenseHamiltonian**(size_t nbf)
        __ public methods __
            + const Eigen::MatrixXd& **getHamiltonian**() const

            + void **solve**() override
            + void **add**(double value, size_t index1, size_t index2) override
    }
}


namespace bmqc {
    class AddressingScheme {
        == constructors ==
            **AddressingScheme**(size_t K, size_t N)
        __ public methods __
            + const bmqc::Matrixi **get_vertex_weights**() const
    }


    class SpinString<T> {
        == constructors ==
            **SpinString**<T>(size_t address, const bmqc::AddressingScheme& addressing_scheme)
        __ public methods __
            + size_t **address**(const bmqc::AddressingScheme& addressing_scheme) const
            + bool **annihilate**(size_t p)
            + bool **create**(size_t p)
    }
}


namespace libwint {
    class SOBasis {
        == constructors ==
            **SOBasis**(const libwint::AOBasis& ao_basis, Eigen::MatrixXd& C)
        __ public methods __
            + inline const libwint::AOBasis& **get_ao_basis**() const
            + inline Eigen::MatrixXd& **get_h_SO**() const
            + inline Eigen::Tensor<double, 4>& **get_g_SO**() const
            + inline const size_t **get_K**() const

            + void **transform**(Eigen::MatrixXd& T)
            + void **transformJacobi**(size_t p, size_t q, double angle)
    }
}


ci.Hamiltonian o--> ci.State

ci.DenseHamiltonian --|> ci.Hamiltonian

ci.CI *--> ci.State
ci.CI o--> libwint.SOBasis
ci.CI *--> ci.Hamiltonian

ci.DOCI --|> ci.CI
ci.DOCI *--> bmqc.AddressingScheme
ci.DOCI ..> bmqc.SpinString


@enduml